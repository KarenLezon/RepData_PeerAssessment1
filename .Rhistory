LACBCNEI$fips[LACBCNEI$fips=='24510']<-'Baltimore City'
View(LACBCNEI)
LACBCNEI$fips[LACBCNEI$fips=='06037']<-'Los Angeles County'
View(LACBCNEI)
LACBCNEI$fips<-as.factor(LACBCNEI$fips)
MobileLACBCNEI<-LACBCNEI[ which(LACBCNEI$SCC%in%MobileSCC),]
TotalLACBCEMobile<-aggregate(MobileLACBCNEI$Emissions,
list(xyear=MobileLACBCNEI$year,xfips=MobileLACBCNEI$fips), sum)
View(TotalLACBCEMobile)
qplot(xyear, x, data=TotalLACBCEMobile,  geom=c("point",  "smooth"), method="lm",
facets=	.	~	xfips, ylab="PM2.5 Emissions", xlab="Year",
main="Toal Emissions in Baltimore City by Source" )
qplot(year, Emissions, data=MobileLACBCNEI,  geom=c("point",  "smooth"), method="lm",
facets=	.	~	fips, ylab="PM2.5 Emissions", xlab="Year",
main="Toal Emissions by area" )
qplot(xyear, x, data=TotalLACBCEMobile,  geom=c("point",  "smooth"), method="lm",
facets=	.	~	xfips, ylab="PM2.5 Emissions", xlab="Year",
main="Toal Emissions by Area" )
qplot(xyear, x, data=TotalLACBCEMobile,  geom=c("point",  "smooth"), method="lm",
facets=	.	~	xfips, ylab="PM2.5 Emissions", xlab="Year",
main="Toal Motor Vehicle Emissions by Area" )
qplot(xyear, x, data=TotalLACBCEMobile,  geom=c("point",  "smooth"), method="lm",
facets=	.	~	xfips, ylab="PM2.5 Emissions", xlab="Year",
main="Total Motor Vehicle Emissions by Area" )
png( file="plot6.png",width=500, height=400)
qplot(xyear, x, data=TotalLACBCEMobile,  geom=c("point",  "smooth"), method="lm",
facets=	.	~	xfips, ylab="PM2.5 Emissions", xlab="Year",
main="Total Motor Vehicle Emissions by Area" )
dev.off()
library(ggplot2)
set.seed(1031)
s <- seq(-2, 2, by = 0.1)
scary <- data.frame(x = s, y = -s^4)
ghost <- data.frame(x = rev(s), y = rev(sin(s*5)-15))
boo <- rbind(scary, ghost)
boo[nrow(boo),] <- boo[1,]
eyes <- data.frame(x = c(-0.5, 0.5), y = c(-5, -5))
mist <- data.frame(x = runif(500, -3, 3), y = runif(500,-16,0), c = c('1','2'))
mist.fg = data.frame()
for (yi in seq(-10,-12,-0.2)) mist.fg=rbind(mist.fg, data.frame(y=yi, x=runif(100, -3+runif(1, 0, 1.2), 0+runif(1))))
for (yi in seq(-11,-14,-0.2)) mist.fg=rbind(mist.fg, data.frame(y=yi, x=runif(100, runif(1, 0, 1.2), 3)))
for (yi in seq(-5,-1,0.2)) mist.fg=rbind(mist.fg, data.frame(y=yi, x=runif(50, -1+runif(1), 0+runif(1, 0, 3))))
black <- element_rect(fill = 'black')
ggplot(data = boo, aes(x,y)) +
geom_point(data = mist, aes(color=c), alpha = 0.3, size = 13) +
scale_color_manual(values = c('gray','lemonchiffon'), guide = FALSE) +
geom_polygon(fill = 'white') +
theme(plot.title = element_text(color='orange', size = 50, face = 'bold',
family = 'HersheyGothicItalian'), panel.background = black, plot.background = black,
panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
geom_point(data = eyes, color = 'black', size = 30) +
geom_point(data = mist.fg, color="gray", alpha = 0.1, size=2.5) +
ggtitle('Happy Halloween!')
setwd("~/Karen/Coursea/DataScience/ReproducibleResearch")
shwd
shwd()
showwd()
showd()
?setwd
getwd()
library("lattice", lib.loc="C:/Program Files/R/R-3.1.2/library")
library("rstudio", lib.loc="~/R/win-library/3.1")
install.packages("slidify")
setwd("C:\Users\Karen\RepData_PeerAssessment1")
setwd("C:/Users/Karen/RepData_PeerAssessment1")
temp <- tempfile()
download.file("activity.zip",temp)
activityData <- read.ccv(unz(temp, "activity.csv"))
unlink(temp)
temp
?tempfile
activityData <- read.csv(unz(temp, "activity.csv"))
?
unz
activityData <- read.csv(unz("activity.zip", "activity.csv"))
View(activityData)
View(activityData)
activityData <- read.csv(unz("activity.zip", "activity.csv"))
setwd("~/Karen/Coursea/DataScience/ReproducibleResearch")
setwd("C:/Users/Karen/RepData_PeerAssessment1")
?time format
?strptime
as.charater(activityData$interval)
as.character(activityData$interval)
as.date(activity$date)
as.Date(activity$date)
as.Date(activityData$date)
paste(activityData$date,as.character(activityData$interval),sep=" ")
DateTime<-paste(activityData$date,as.character(activityData$interval),sep=" ")
as.Date(activityData$date)
strptime(DateTime,format= "%Y-%m-%d %k")
as.posixlt(DateTime)
as.POSIXlt(DateTime)
activity$interval%/%100
activityData$interval%/%100
activityData$interval%%100
0%/%100
5%/%100
105%/%100
paste(as.character(activity$interval%/%100),
as.character(activity$interval%%100),sep=":"
)
paste(as.character(activityData$interval%/%100),
as.character(activityData$interval%%100),sep=":"
)
?length
length(activityData$interval)
x<-activityData$interval
for (i in 1:length(x))
{h<-as.character(x[i]%/%100)
if (nchar(h)==1) h<-paste("0",h,sep="")
m<-as.character(x[i]%%100)
if (nchar(m)==1) m<-paste("0",m,sep="")
y[i]<-paste(h,m,sep="")
}
x<-activityData$interval
y<-charater(length(x))
for (i in 1:length(x))
{h<-as.character(x[i]%/%100)
if (nchar(h)==1) h<-paste("0",h,sep="")
m<-as.character(x[i]%%100)
if (nchar(m)==1) m<-paste("0",m,sep="")
y[i]<-paste(h,m,sep="")
}
x<-activityData$interval
y<-character(length(x))
for (i in 1:length(x))
{h<-as.character(x[i]%/%100)
if (nchar(h)==1) h<-paste("0",h,sep="")
m<-as.character(x[i]%%100)
if (nchar(m)==1) m<-paste("0",m,sep="")
y[i]<-paste(h,m,sep="")
}
y
for (i in 1:length(activityData$interval))
{h<-as.character(activityData$interval[i]%/%100)
if (nchar(h)==1) h<-paste("0",h,sep="")
m<-as.character(activityData$interval[i]%%100)
if (nchar(m)==1) m<-paste("0",m,sep="")
activityData$time[i]<-paste(h,m,sep="")
}
View(activityData)
x<-as.POSIXlt("2012-10-01 0005",format="%Y-%m-%d %H%M")
x
x<-as.POSIXlt("2012-10-01 0005",format="%Y-%m-%d %H%M",tz="GMT")
x
activityData$DateTime<-paste(activityData$date,activityData$time),sep=" ")
activityData$DateTime<-paste(activityData$date,activityData$time,sep=" ")
activityData$DateTime<-as.POSIXlt(activityData$DateTime,format= "%Y-%m-%d %H%M",tz="GMT")
View(activityData)
?hist
hist(activityData$steps by activityData$date)
hist(activityData$steps)
?sum
?tapply
?aggregate
aggregate(activityData$steps, by activityData$date)
aggregate(activityData$steps, list(date=activityData$date))
aggregate(activityData$steps, list(date=activityData$date),sum)
x<-aggregate(activityData$steps, list(date=activityData$date),sum)
hist(x$x)
hist(x$x, breaks=1000)
hist(x$x, bins=1000)
hist(x$x, breaks=10)
hist(x$x, breaks=10)
hist(x$x, breaks=20)
hist(x$x, breaks=7)
hist(x$x, breaks=8)
x<-aggregate(activityData$steps, list(date=activityData$date),sum,na.action = na.omit)
meansteps<-aggregate(activityData$steps, list(date=activityData$date),mean)
mediansteps<-aggregate(activityData$steps, list(date=activityData$date),median)
View(meansteps)
?mean
View(mediansteps)
?median
?aggregate
View(x)
mediansteps<-aggregate(activityData$steps, list(date=activityData$date),median)
View(mediansteps)
?dplyr
install.packages("dplyr")
install.packages("doBy")
library("doBy", lib.loc="~/R/win-library/3.1")
stepsSummary<-summaryBy(steps ~ date, data = activityData,
FUN = list(sum, mean, median))
View(stepsSummary)
median(activityData$steps)
median(activityData$steps,na.rm-TRUE)
median(activityData$steps,na.rm=TRUE)
hist(stepsSummary$steps.sum, breaks=10)
x<-summaryBy(steps ~ interval, data = activityData,
FUN = list(mean, max))
View(x)
x<-summaryBy(steps ~ interval, data = activityData,
FUN = list(mean, max),na.rm=TRUE)
View(x)
plot(x$interval,x$steps.mean,type="l")
x<-summaryBy(steps ~ time, data = activityData,
FUN = list(mean, max),na.rm=TRUE)
plot(x$time,x$steps.mean,type="l")
activityData$time<-as.factor(activityData$time)
x<-summaryBy(steps ~ time, data = activityData,
FUN = list(mean, max),na.rm=TRUE)
plot(x$time,x$steps.mean,type="l")
max(x$steps.mean)
x$time[x$steps.mean == max(x$steps.mean)]
?weekdays
?nrows
length(activityData$steps[activityData$steps==NA])
nrows
activityData$steps[activityData$steps==NA]
View(activityData)
View(activityData)
activityData$steps[is.na(activityData$steps)]
length(activityData$steps[is.na(activityData$steps)])
is.na(activityData$steps)
length(activityData$steps[is.na(activityData$steps)])
getwd
getwd()
setwd("~/Karen/Coursea/DataScience/ReproducibleResearch")
is.na(activityData$steps[1])
for (i in 1:length(activityData$steps))
{
if (is.na(activityData$steps[i]))
activityData$stepsnew[i]<-stepsbyinterval$steps.mean
[stepsbyinterval$steps.time == activityData$time[i]]
else activityData$stepsnew[i]<-activityData$steps[i]
}
for (i in 1:length(activityData$steps))
{
if (is.na(activityData$steps[i]))
activityData$stepsnew[i]<-
stepsbyinterval$steps.mean[stepsbyinterval$steps.time == activityData$time[i]]
else activityData$stepsnew[i]<-activityData$steps[i]
}
stepsbyinterval<-summaryBy(steps ~ time, data = activityData,
FUN = list(mean, max),na.rm=TRUE)
for (i in 1:length(activityData$steps))
{
if (is.na(activityData$steps[i]))
activityData$stepsnew[i]<-
stepsbyinterval$steps.mean[stepsbyinterval$steps.time == activityData$time[i]]
else activityData$stepsnew[i]<-activityData$steps[i]
}
stepsbyinterval$steps.mean[stepsbyinterval$steps.time == activityData$time[1]]
stepsbyinterval$steps.mean[stepsbyinterval$steps.time == activityData$time[i]
]
activityData$time[i]
activityData$time[1]
activityData$time[500]
stepsbyinterval$steps.time == activityData$time[1]
View(stepsbyinterval)
stepsbyinterval$steps.time == "0005"
stepsbyinterval$steps.mean[stepsbyinterval$steps.time == activityData$time[i]]
stepsbyinterval$steps.mean[stepsbyinterval$steps.time == activityData$time[5]]
stepsbyinterval$steps.mean[stepsbyinterval$time == activityData$time[5]]
for (i in 1:length(activityData$steps))
{
if (is.na(activityData$steps[i]))
activityData$stepsnew[i]<-
stepsbyinterval$steps.mean[stepsbyinterval$time == activityData$time[i]]
else activityData$stepsnew[i]<-activityData$steps[i]
}
View(activityData)
library("doBy", lib.loc="~/R/win-library/3.1")
stepsNewSummary<-summaryBy(stepsnew ~ date, data = activityData,
FUN = list(sum, mean, median))
View(stepsNewSummary)
hist(stepsnewSummary$stepsnew.sum, breaks=10)
hist(stepsNewSummary$stepsnew.sum, breaks=10)
?weekdays
weekdays(activityData$DateTime[1])
weekdays(activityData$DateTime[500])
weekdays(activityData$DateTime[600])
weekdays(activityData$DateTime[700])
weekdays(activityData$DateTime[750])
weekdays(activityData$DateTime[850])
weekdays(activityData$DateTime[860])
weekdays(activityData$DateTime[960])
weekdays(activityData$DateTime[1960])
weekdays(activityData$DateTime[1960]) == ("Saturday"|"Sunday")
weekdays(activityData$DateTime[1960]) in ("Saturday"|"Sunday")
(weekdays(activityData$DateTime[1960]) in ("Saturday"|"Sunday"))
?logicals
?logical
?operators
?operator
(weekdays(activityData$DateTime[1960]) in list("Saturday","Sunday"))
(weekdays(activityData$DateTime[1960]) in list("Saturday"
(weekdays(activityData$DateTime[1960]) == "Saturday")
(weekdays(activityData$DateTime[1960]) == "Sunday")
(weekdays(activityData$DateTime[1960]) == "Sunday" | weekdays(activityData$DateTime[1960]) == "Saturday")
?subset
?char
?string
?substring
substr(weekdays(activityData$DateTime[1960]),1,1)
substr(weekdays(activityData$DateTime[1960]),1,1) == "S"
substr(weekdays(activityData$DateTime[700]),1,1) == "S"
for (i in 1:length(activityData$DateTime))
{
if (substr(weekdays(activityData$DateTime[i]),1,1) == "S")
activityData$daytype[i]<-"Weekend"
else activityData$daytype[i]<-"weekday"
}
activityData$daytype<-as.factor(activityData$daytype)
View(stepsbyinterval)
stepsbyintday<-aggregate(activityData$stepsnew,
list(xyear=activityData$time,xtype=activityData$daytype),
mean)
View(stepsbyintday)
for (i in 1:length(activityData$DateTime))
{
if (substr(weekdays(activityData$DateTime[i]),1,1) == "S")
activityData$daytype[i]<-"weekend"
else activityData$daytype[i]<-"weekday"
}
stepsbyintday<-aggregate(activityData$stepsnew,
list(xyear=activityData$time,xtype=activityData$daytype),
mean)
View(activityData)
View(stepsbyintday)
warnings()
setwd("C:/Users/Karen/RepData_PeerAssessment1")
activityData <- read.csv(unz("activity.zip", "activity.csv"))
setwd("~/Karen/Coursea/DataScience/ReproducibleResearch")
for (i in 1:length(activityData$interval))
{h<-as.character(activityData$interval[i]%/%100)
if (nchar(h)==1) h<-paste("0",h,sep="")
m<-as.character(activityData$interval[i]%%100)
if (nchar(m)==1) m<-paste("0",m,sep="")
activityData$time[i]<-paste(h,m,sep="")
}
activityData$DateTime<-paste(activityData$date,activityData$time,sep=" ")
activityData$DateTime<-as.POSIXlt(activityData$DateTime,format= "%Y-%m-%d %H%M",tz="GMT")
activityData$time<-as.factor(activityData$time)
stepsSummary<-summaryBy(steps ~ date, data = activityData,
FUN = list(sum, mean, median))
hist(stepsSummary$steps.sum, breaks=10)
stepsbyinterval<-summaryBy(steps ~ time, data = activityData,
FUN = list(mean),na.rm=TRUE)
plot(stepsbyinterval$time,stepsbyinterval$steps.mean,type="l")
for (i in 1:length(activityData$steps))
{
if (is.na(activityData$steps[i]))
activityData$stepsnew[i]<-
stepsbyinterval$steps.mean[stepsbyinterval$time == activityData$time[i]]
else activityData$stepsnew[i]<-activityData$steps[i]
}
stepsNewSummary<-summaryBy(stepsnew ~ date, data = activityData,
FUN = list(sum, mean, median))
hist(stepsNewSummary$stepsnew.sum, breaks=10)
for (i in 1:length(activityData$DateTime))
{
if (substr(weekdays(activityData$DateTime[i]),1,1) == "S")
activityData$daytype[i]<-"weekend"
else activityData$daytype[i]<-"weekday"
}
activityData$daytype<-as.factor(activityData$daytype)
stepsbyintday<-aggregate(activityData$stepsnew,
list(xinterval=activityData$time,xtype=activityData$daytype),
mean)
View(stepsbyintday)
qplot(xinterval, x, data=stepsbyintday,  geom=c("point",  "smooth"), method="lm",
facets=	.	~	xtype, ylab="PM2.5 Emissions", xlab="Year",
main="Toal Emissions in Baltimore City by Source" )
install.packages("ggplot2")
library("ggplot2", lib.loc="~/R/win-library/3.1")
qplot(xinterval, x, data=stepsbyintday,  geom=c("point",  "smooth"), method="lm",
facets=	.	~	xtype, ylab="average number of steps", xlab="Interval",
main="Toal Emissions in Baltimore City by Source" )
activityData$time<-as.character(activityData$time)
qplot(xinterval, x, data=stepsbyintday,  geom=c("point",  "smooth"), method="lm",
facets=	.	~	xtype, ylab="average number of steps", xlab="Interval",
main="Toal Emissions in Baltimore City by Source" )
stepsbyinterval$time<-as.character(stepsbyinterval$time)
plot(stepsbyinterval$time,stepsbyinterval$steps.mean,type="l")
setwd("C:/Users/Karen/RepData_PeerAssessment1")
activityData <- read.csv(unz("activity.zip", "activity.csv"))
setwd("~/Karen/Coursea/DataScience/ReproducibleResearch")
for (i in 1:length(activityData$interval))
{h<-as.character(activityData$interval[i]%/%100)
if (nchar(h)==1) h<-paste("0",h,sep="")
m<-as.character(activityData$interval[i]%%100)
if (nchar(m)==1) m<-paste("0",m,sep="")
activityData$time[i]<-paste(h,m,sep="")
}
activityData$DateTime<-paste(activityData$date,activityData$time,sep=" ")
activityData$DateTime<-as.POSIXlt(activityData$DateTime,format= "%Y-%m-%d %H%M",tz="GMT")
stepsSummary<-summaryBy(steps ~ date, data = activityData,
FUN = list(sum, mean, median))
hist(stepsSummary$steps.sum, breaks=10)
stepsbyinterval<-summaryBy(steps ~ time, data = activityData,
FUN = list(mean),na.rm=TRUE)
plot(stepsbyinterval$time,stepsbyinterval$steps.mean,type="l")
max(stepsbyinterval$steps.mean)
stepsbyinterval$time[stepsbyinterval$steps.mean == max(stepsbyinterval$steps.mean)]
for (i in 1:length(activityData$steps))
{
if (is.na(activityData$steps[i]))
activityData$stepsnew[i]<-
stepsbyinterval$steps.mean[stepsbyinterval$time == activityData$time[i]]
else activityData$stepsnew[i]<-activityData$steps[i]
}
stepsNewSummary<-summaryBy(stepsnew ~ date, data = activityData,
FUN = list(sum, mean, median))
hist(stepsNewSummary$stepsnew.sum, breaks=10)
for (i in 1:length(activityData$DateTime))
{
if (substr(weekdays(activityData$DateTime[i]),1,1) == "S")
activityData$daytype[i]<-"weekend"
else activityData$daytype[i]<-"weekday"
}
activityData$daytype<-as.factor(activityData$daytype)
stepsbyintday<-aggregate(activityData$stepsnew,
list(xinterval=activityData$time,xdaytype=activityData$daytype),
mean)
install.packages("lattice")
xyplot(x~xinterval|xdaytype)
install.packages("lattice")
library("lattice", lib.loc="~/R/win-library/3.1")
xyplot(x~xinterval|xdaytype,type="l")
xyplot(stepsbyintday$x~stepsbyintday$xinterval|stepsbyintday$xdaytype,type="l")
library("lattice", lib.loc="~/R/win-library/3.1")
xyplot(stepsbyintday$x~stepsbyintday$xinterval|stepsbyintday$xdaytype,type="l")
xyplot(stepsbyintday$x~stepsbyintday$xinterval|stepsbyintday$xdaytype)
View(stepsbyintday)
qplot(xinterval, x, data=stepsbyintday,  geom=c("point",  "smooth"), method="lm",
facets=	.	~	xdaytype, ylab="average number of steps", xlab="Interval",
main="Toal Emissions in Baltimore City by Source" )
library("ggplot2", lib.loc="~/R/win-library/3.1")
qplot(xinterval, x, data=stepsbyintday,  geom=c("point",  "smooth"), method="lm",
facets=	.	~	xdaytype, ylab="average number of steps", xlab="Interval",
main="Toal Emissions in Baltimore City by Source" )
xyplot(stepsbyintday$x~stepsbyintday$xinterval|stepsbyintday$xdaytype,type="l")
xyplot(stepsbyintday$x~stepsbyintday$xinterval|stepsbyintday$xdaytype,type="p")
setwd("~/Karen/Coursea/DataScience/ReproducibleResearch")
library("lattice", lib.loc="~/R/win-library/3.1")
?xyplot
grid.layout(2,1)
xyplot(stepsbyintday$x~stepsbyintday$xinterval|stepsbyintday$xdaytype,type="l",
layout=grid.layout(2,1))
xyplot(stepsbyintday$x~stepsbyintday$xinterval|stepsbyintday$xdaytype,type="l",
layout=c(2,1))
xyplot(stepsbyintday$x~stepsbyintday$xinterval|stepsbyintday$xdaytype,type="l",
layout=c(1,2))
View(stepsbyinterval)
stepsbyintday<-aggregate(activityData$stepsnew,
list(xinterval=activityData$interval,xdaytype=activityData$daytype),
mean)
xyplot(x~xinterval|xdaytype, data=stepsbyintday, type="l",
layout=c(1,2))
mean(stepsSummary$steps.sum)
mean(stepsSummary$steps.sum,rm.na=TRUE)
?mean
mean(stepsSummary$steps.sum,na.rm=TRUE)
median(stepsSummary$steps.sum,na.rm=TRUE)
View(stepsNewSummary)
View(stepsNewSummary)
plot(stepsbyinterval$time,stepsbyinterval$steps.mean,type="l")
hist(stepsSummary$steps.sum, breaks=10,main="Histogram of ")
hist(stepsSummary$steps.sum, breaks=10,main="Total Steps per Day", xlab="Sum of Steps")
hist(stepsSummary$steps.sum, breaks=10,main="Total Steps per Day",
xlab="Sum of Steps",col="blue")
hist(stepsSummary$steps.sum, breaks=10,main="Total Steps per Day",
xlab="Sum of Steps",col="light blue")
plot(stepsbyinterval$time,stepsbyinterval$steps.mean,type="l",
main="Average Daily Activity Pattern",xlab="Interval during the day",
ylab="average number of steps", col="red")
line(max(stepsbyinterval$steps.mean))
plot(stepsbyinterval$time,stepsbyinterval$steps.mean,type="l",
main="Average Daily Activity Pattern",xlab="Interval during the day",
ylab="average number of steps", col="red",line(max(stepsbyinterval$steps.mean)))
plot(stepsbyinterval$time,stepsbyinterval$steps.mean,type="l",
main="Average Daily Activity Pattern",xlab="Interval during the day",
ylab="average number of steps", col="red",line=max(stepsbyinterval$steps.mean))
plot(stepsbyinterval$time,stepsbyinterval$steps.mean,type="l",
main="Average Daily Activity Pattern",xlab="Interval during the day",
ylab="average number of steps", col="red")
hist(stepsNewSummary$stepsnew.sum, breaks=10,main="Total Steps per Day",
xlab="Sum of Steps",col="light blue")
hist(stepsNewSummary$stepsnew.sum, breaks=10,main="Total Steps per Day",
xlab="Sum of Steps",col="light red")
hist(stepsNewSummary$stepsnew.sum, breaks=10,main="Total Steps per Day",
xlab="Sum of Steps",col="pink")
mean(stepsNewSummary$stepsnew.sum,na.rm=TRUE)
median(stepsNewSummary$stepsnew.sum,na.rm=TRUE)
mean(stepsNewSummary$stepsnew.sum)
median(stepsNewSummary$stepsnew.sum)
mean(stepsSummary$steps.sum,na.rm=TRUE)
median(stepsSummary$steps.sum,na.rm=TRUE)
xyplot(x~xinterval|xdaytype, data=stepsbyintday, type="l", layout=c(1,2),
main="Average Daily Activity Pattern",xlab="Interval during the day",
ylab="average number of steps")
library("doBy", lib.loc="~/R/win-library/3.1")
library("knitr", lib.loc="~/R/win-library/3.1")
setwd("C:/Users/Karen/RepData_PeerAssessment1")
knit2html(PA1_template.Rmd)
ls
knit2html(PA1_template.Rmd)
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
setwd("~/Karen/Coursea/DataScience/ReproducibleResearch")
stormdata<-read.csv(bzfile("repdata-data-StormData.csv.bz2"))
head(stormdata)
head(stormdata)
unique(WFO)
unique(stormdata$WFO)
head(stormdata)
?read.csv
setwd("C:/Users/Karen/RepData_PeerAssessment1")
